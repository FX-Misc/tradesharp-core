/***************************************************************************** 
* Copyright 2016 Aurora Solutions 
* 
*    http://www.aurorasolutions.io 
* 
* Aurora Solutions is an innovative services and product company at 
* the forefront of the software industry, with processes and practices 
* involving Domain Driven Design(DDD), Agile methodologies to build 
* scalable, secure, reliable and high performance products.
* 
* TradeSharp is a C# based data feed and broker neutral Algorithmic 
* Trading Platform that lets trading firms or individuals automate 
* any rules based trading strategies in stocks, forex and ETFs. 
* TradeSharp allows users to connect to providers like Tradier Brokerage, 
* IQFeed, FXCM, Blackwood, Forexware, Integral, HotSpot, Currenex, 
* Interactive Brokers and more. 
* Key features: Place and Manage Orders, Risk Management, 
* Generate Customized Reports etc 
* 
* Licensed under the Apache License, Version 2.0 (the "License"); 
* you may not use this file except in compliance with the License. 
* You may obtain a copy of the License at 
* 
*    http://www.apache.org/licenses/LICENSE-2.0 
* 
* Unless required by applicable law or agreed to in writing, software 
* distributed under the License is distributed on an "AS IS" BASIS, 
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
* See the License for the specific language governing permissions and 
* limitations under the License. 
*****************************************************************************/


ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TradeHub.Common.Core.DomainModels.OrderDomain;
using TradeHub.Common.Core.Repositories.Parameters;

namespace TradeHub.ReportingEngine.CommunicationManager.Service
{
    /// <summary>
    /// Blueprint for the communicators to give access to Reporting Engine
    /// </summary>
    public interface ICommunicator
    {
        /// <summary>
        /// Event Raised to notify listeners about available Order Report
        /// </summary>
        event Action<IList<object[]>> OrderReportReceivedEvent;

        /// <summary>
        /// Event Raised to notify listeners about available Profit Loss Report
        /// </summary>
        event Action<ProfitLossStats> ProfitLossReportReceivedEvent;

        /// <summary>
        /// Event Raised to notify listeners about incoming Order Report Request
        /// </summary>
        event Action<Dictionary<OrderParameters, string>> RequestOrderReportEvent;

        /// <summary>
        /// Event Raised to notify listeners about incoming Profit Loss Report Request
        /// </summary>
        event Action<Dictionary<TradeParameters, string>> RequestProfitLossReportEvent;

        /// <summary>
        /// Passes required parameters to intended function to receive receive orders information
        /// </summary>
        /// <param name="parameters"></param>
        void RequestOrderReport(Dictionary<OrderParameters, string> parameters);

        /// <summary>
        /// Passes required parameters to intended function to receive receive Profit Loss information
        /// </summary>
        /// <param name="parameters"></param>
        void RequestProfitLossReport(Dictionary<TradeParameters, string> parameters);

        /// <summary>
        /// Called when requested Order Report is generated by the system
        /// </summary>
        /// <param name="report"></param>
        void OrderReportReceived(IList<object[]> report);

        /// <summary>
        /// Called when requested Profit Loss Report is generated by the system
        /// </summary>
        /// <param name="report"></param>
        void ProfitLossReportReceived(ProfitLossStats report);
    }
}
