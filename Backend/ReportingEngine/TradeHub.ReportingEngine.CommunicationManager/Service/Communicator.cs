using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using TraceSourceLogger;
using TradeHub.Common.Core.DomainModels.OrderDomain;
using TradeHub.Common.Core.Repositories.Parameters;

namespace TradeHub.ReportingEngine.CommunicationManager.Service
{
    /// <summary>
    /// Provides a direct communication medium between Reporting Engine and accessing Client
    /// </summary>
    public class Communicator : ICommunicator
    {
        private Type _type = typeof (Communicator);

        #region Events

        /// <summary>
        /// Event Raised to notify listeners about available Order Report
        /// </summary>
        public event Action<IList<object[]>> OrderReportReceivedEvent;

        /// <summary>
        /// Event Raised to notify listeners about available Profit Loss Report
        /// </summary>
        public event Action<ProfitLossStats> ProfitLossReportReceivedEvent;

        /// <summary>
        /// Event Raised to notify listeners about incoming Order Report Request
        /// </summary>
        public event Action<Dictionary<OrderParameters, string>> RequestOrderReportEvent;

        /// <summary>
        /// Event Raised to notify listeners about incoming Profit Loss Report Request
        /// </summary>
        public event Action<Dictionary<TradeParameters, string>> RequestProfitLossReportEvent;

        #endregion

        #region Order Report Functions

        /// <summary>
        /// Passes required parameters to intended function to receive receive orders information
        /// </summary>
        /// <param name="parameters">Search parameters for report</param>
        public void RequestOrderReport(Dictionary<OrderParameters, string> parameters)
        {
            try
            {
                if (Logger.IsDebugEnabled)
                {
                    Logger.Debug("Order report request received.", _type.FullName, "RequestOrderReport");
                }

                // Raise Event to notify listeners
                if (RequestOrderReportEvent != null)
                {
                    RequestOrderReportEvent(parameters);
                }
            }
            catch (Exception exception)
            {
                Logger.Error(exception, _type.FullName, "RequestOrderParameters");
            }
        }

        /// <summary>
        /// Called when requested Order Report is generated by the system
        /// </summary>
        /// <param name="report">Contains requested Information</param>
        public void OrderReportReceived(IList<object[]> report)
        {
            try
            {
                if (Logger.IsDebugEnabled)
                {
                    Logger.Debug("Requested order report data received.", _type.FullName, "OrderReportReceived");
                }

                // Raise Event to notify listeners
                if (OrderReportReceivedEvent != null)
                {
                    OrderReportReceivedEvent(report);
                }
            }
            catch (Exception exception)
            {
                Logger.Error(exception, _type.FullName, "OrderReportReceived");
            }
        }

        #endregion

        #region Profit Loss Report Functions

        /// <summary>
        /// Passes required parameters to intended function to receive receive Profit Loss information
        /// </summary>
        /// <param name="parameters">Search Parameters for report</param>
        public void RequestProfitLossReport(Dictionary<TradeParameters, string> parameters)
        {
            try
            {
                if (Logger.IsDebugEnabled)
                {
                    Logger.Debug("Profit Loss report request received.", _type.FullName, "RequestProfitLossReport");
                }

                // Raise Event to notify listeners
                if (RequestProfitLossReportEvent != null)
                {
                    RequestProfitLossReportEvent(parameters);
                }
            }
            catch (Exception exception)
            {
                Logger.Error(exception, _type.FullName, "RequestProfitLossReport");
            }
        }

        /// <summary>
        /// Called when requested Profit Loss Report is generated by the system
        /// </summary>
        /// <param name="report">Contains requested information</param>
        public void ProfitLossReportReceived(ProfitLossStats report)
        {
            try
            {
                if (Logger.IsDebugEnabled)
                {
                    Logger.Debug("Requested order report data received.", _type.FullName, "ProfitLossReportReceived");
                }

                // Raise Event to notify listeners
                if (ProfitLossReportReceivedEvent != null)
                {
                    ProfitLossReportReceivedEvent(report);
                }
            }
            catch (Exception exception)
            {
                Logger.Error(exception, _type.FullName, "ProfitLossReportReceived");
            }
        }

        #endregion
    }
}
